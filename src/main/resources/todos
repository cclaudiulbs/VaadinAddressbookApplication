for navigating through views, use: NavigationController;
an instance of this NavigationController should be a member of each ViewImpl; can be a static singleton instance shared across
multiple viewImpls; passed in as Constructor Argument; when the event declared in View Interface is fired
the Presenter should "talk" to the "model" get some data, populate the view, and navigation controller should
dispatch (not the presenter) to the next view;

Example:


public class MainViewImpl implements MainView {
	
	private VerticalLayout subViewContainer;
	private OutboxViewImpl outboxView;

	public MainViewImpl(EventBus eventBus, 
			NavigationController navigationController)
	{
		
	}
	
@Event public void someEvent(Event e) {
	outboxView.getPresenter.refreshList();
	setSubview(outboxView);
	navigationController.setCurrentView(outboxView);
}

 "Next we use the OutboxPresenter ( by calling outboxView.getPresenter() ) to refresh the data (the list of mails) and to refresh the OutboxView"
 
 Other article from GWT MVP says:
 http://www.slideshare.net/martyhall/gwt-tutorial-introduction-to-the-modelviewpresenter-mvp-architecture
 
 In the ApplicationController or the NavigationController:
 public void onValueChange(SomeChangeEvent event) {
 		if(token.equals("list")) {
 			presenter = new ContactsListPresenter(new ContactsView());
 		} else if( token.equals("add") ) {
 			presenter = new EdicContactPresenter(new EditContactsView());
 		}
 }
 
 We need the AppController(aka NavigationController) which is a Super-Presenter; Handles Logic not specific to any presenter;
 handles Views Transitions/Navigation;
 Most oftenly attaches itself from the Main View Layout;
 
 For some events, we can do register the views through a Map<> as in the ThreadLocal Pattern use-case; when something is fired, the
 map is checked, and for all the registered listeners the event is handled;
 
 LEFT: showAllContacts() is a read-only view, which does NOT need a self-listener since its only displaying
 data coming from the model;
 
 Notes of implementation:
 The application is using a new design: MVPC, that is model view presenter Controller;
 The controller in this case, is a supervisor Presenter, which responsibility is to dispatch to the 
 corresponding pressed menu button; 
 The Logic is passed further to each Presenter declared foreach View;
 Each View is declared and registered with a Signature in the main app init() method, for the NavigationController
 which is the Super-Presenter(or the C - Controller) of the Addressbook Application;
 When a new View is implemented, the view needs to be registered firstly, and then its logic appended in the
 Navigation Flow of the Super-Presenter;
 Using Vaadin, rather than controlling the flow through page-urls, we control the Navigation FLow through pressed
 Buttons, retrieved via particular Events;
 
 TODO: 
 1. add-contact
 2. update-contact
 3. delete-contact
 
 4. share-contact(pop-up for sharing options)
 5. help(pop-up for help view)
 
 6. shiro-related:
 login -> and display the user while surfing the application
 while the user is logged, offer some functionalities over the logged-out users(such as when the user is logged out
 he can only click on: find-all, or search - that is readonly mode)
 when the user is logged to application, the menu for CRUD is activated, hence the user can do some basic crud ops;
 if the user is not admin, it cannot DROP-ALL users;
 
 7. switch for pagedTable || filteringTable

 TODO: NEXT IMPLs:
--> make default login into application: the Help View and its corresponding menu the default focusable, and NOT the add-Contact
