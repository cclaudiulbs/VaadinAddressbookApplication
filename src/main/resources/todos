for navigating through views, use: NavigationController;
an instance of this NavigationController should be a member of each ViewImpl; can be a static singleton instance shared across
multiple viewImpls; passed in as Constructor Argument; when the event declared in View Interface is fired
the Presenter should "talk" to the "model" get some data, populate the view, and navigation controller should
dispatch (not the presenter) to the next view;

Example:


public class MainViewImpl implements MainView {
	
	private VerticalLayout subViewContainer;
	private OutboxViewImpl outboxView;

	public MainViewImpl(EventBus eventBus, 
			NavigationController navigationController)
	{
		
	}
	
@Event public void someEvent(Event e) {
	outboxView.getPresenter.refreshList();
	setSubview(outboxView);
	navigationController.setCurrentView(outboxView);
}

 "Next we use the OutboxPresenter ( by calling outboxView.getPresenter() ) to refresh the data (the list of mails) and to refresh the OutboxView"
 
 Other article from GWT MVP says:
 http://www.slideshare.net/martyhall/gwt-tutorial-introduction-to-the-modelviewpresenter-mvp-architecture
 
 In the ApplicationController or the NavigationController:
 public void onValueChange(SomeChangeEvent event) {
 		if(token.equals("list")) {
 			presenter = new ContactsListPresenter(new ContactsView());
 		} else if( token.equals("add") ) {
 			presenter = new EdicContactPresenter(new EditContactsView());
 		}
 }
 
 We need the AppController(aka NavigationController) which is a Super-Presenter; Handles Logic not specific to any presenter;
 handles Views Transitions/Navigation;
 Most oftenly attaches itself from the Main View Layout;
 
 For some events, we can do register the views through a Map<> as in the ThreadLocal Pattern use-case; when something is fired, the
 map is checked, and for all the registered listeners the event is handled;
 
 LEFT: showAllContacts() is a read-only view, which does NOT need a self-listener since its only displaying
 data coming from the model;